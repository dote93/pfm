
import Dungeon.Dungeon;
import Dungeon.EvoMapsGenerator;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneLayout;

/*
 * To change dungeon license header, choose License Headers in Project Properties.
 * To change dungeon template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
//        dungeon.jPanel1.setLayout(new GridBagLayout()); 
    }

    /**
     * dungeon method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify dungeon code. The content of dungeon method
     * is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(876, 511));
        setName("EvoMapCreation"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMinimumSize(new java.awt.Dimension(448, 292));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jTextPane1.setFocusable(false);
        jTextPane1.setOpaque(false);
        jScrollPane2.setViewportView(jTextPane1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMinimumSize(new java.awt.Dimension(129, 129));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setMinimumSize(new java.awt.Dimension(129, 129));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setMinimumSize(new java.awt.Dimension(129, 129));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
        });
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(97, 97, 97))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if (this.isClicked == false) {
            this.isClicked=true;
            try {
                JScrollPane scrollPanel = this.createEvolution();
                this.jPanel1.add(scrollPanel);
                this.jPanel1.updateUI();
            } catch (CloneNotSupportedException | IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                this.jPanel1.updateUI();
            }
        }

    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
        if (this.dungeon != null) {
            this.jPanel1.removeAll();
            Box bv = Box.createVerticalBox();
            try {
                bv = this.createMap(this.dungeon);
                JPanel panel = new JPanel();
                panel.setLayout(new BorderLayout());
                panel.add(BorderLayout.NORTH, Box.createVerticalGlue());
                panel.add(BorderLayout.WEST, Box.createHorizontalGlue());
                panel.add(BorderLayout.CENTER, bv);
                panel.add(BorderLayout.EAST, Box.createHorizontalGlue());
                panel.add(BorderLayout.SOUTH, Box.createVerticalGlue());

                JScrollPane scrollPane = new JScrollPane(panel);
                scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                this.jPanel1.add(scrollPane);
                this.jPanel1.updateUI();

            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jPanel1ComponentResized

    /**
     * *
     *
     * @return @throws CloneNotSupportedException
     * @throws IOException
     */
    private JScrollPane createEvolution() throws CloneNotSupportedException, IOException {

        EvoMapsGenerator evoMapsGenerator = new EvoMapsGenerator();

        evoMapsGenerator.populationGenerator();

        try {
            Box bv = Box.createVerticalBox();
            if (evoMapsGenerator.evolucion) {
                System.out.println("Mejor individuo de la poblacion");

                if (evoMapsGenerator.evopopulation.Individuos_parada.get(0).fitness < 0) {
                    System.out.println("HA HABIDO UN ERROR");
                }
                // evoMapsGenerator.Poblacion.get(0).pintar();
                this.dungeon = (Dungeon) evoMapsGenerator.evopopulation.Individuos_parada.get(0).clone();
                this.dungeon.pintar();
                bv = this.createMap(this.dungeon);

                String text = this.dungeon.getDungeonInfo();
                this.jTextPane1.setText(text);
//                this.jTextPane1.getStyel
            } else {
                // if(evoMapsGenerator.Poblacion.size()>= 1)
                //    evoMapsGenerator.Poblacion.get(0).pintar();
                this.dungeon = (Dungeon) evoMapsGenerator.evopopulation.Individuos_parada.get(0).clone();
                this.dungeon.pintar();
                bv = this.createMap(this.dungeon);

                String text = this.dungeon.getDungeonInfo();
                this.jTextPane1.setText(text);
            }

            //Se pintan los datos esperados para saber que es lo que se buscaba
            System.out.println("Numero de monstruos recorrido esperados   : " + evoMapsGenerator.dificultad_nivel[0]);
            System.out.println("Numero de tesoros recorrido esperados     : " + evoMapsGenerator.dificultad_nivel[1]);
            System.out.println("Numero de monstruos esperados             : " + evoMapsGenerator.dificultad_nivel[2]);
            System.out.println("Numero de tesoros esperados               : " + evoMapsGenerator.dificultad_nivel[3]);
            System.out.println("Area Segura monstruo esperada             : " + evoMapsGenerator.dificultad_nivel[4]);
            System.out.println("Area Segura tesoro esperada               : " + evoMapsGenerator.dificultad_nivel[5]);
            System.out.println("Seguridad tesoro esperada                 : " + evoMapsGenerator.dificultad_nivel[6]);
            System.out.println("Numero de celdas Pared esperadas          : " + evoMapsGenerator.dificultad_nivel[7]);
            System.out.println("Numero de celdas Libres esperadas         : " + (evoMapsGenerator.porcentaje
                    - evoMapsGenerator.numero_monstruos - evoMapsGenerator.numero_tesoros));

            System.out.print("----------------------------------------------------\n");
            System.out.print("----------------------------------------------------\n");

            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
//            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
//            scrollPane.setBounds(50, 30, 300, 50);
            panel.add(BorderLayout.NORTH, Box.createVerticalGlue());
            panel.add(BorderLayout.WEST, Box.createHorizontalGlue());
            panel.add(BorderLayout.CENTER, bv);
            panel.add(BorderLayout.EAST, Box.createHorizontalGlue());
            panel.add(BorderLayout.SOUTH, Box.createVerticalGlue());

            JScrollPane scrollPane = new JScrollPane(panel);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
//            scrollPane.setBounds(50, 30, 300, 50);
            return scrollPane;

        } catch (IOException e) {
            System.out.println("Home.jLabel1MouseClicked()");
            //e.printStackTrace();
            return null;
        }
    }

    /**
     * *
     * Crea un para con las imagenes correspondientes para luego añadirlo al
     * scrollPanel
     *
     * @param dungeon Dungeon que va a ser pintado
     */
    private Box createMap(Dungeon dungeon) throws IOException {

        Box bv = Box.createVerticalBox();
        for (int i = 0; i < dungeon.dungeon.length; i++) {
            Box bh = Box.createHorizontalBox();
            for (int j = 0; j < dungeon.dungeon[i].length; j++) {
                String file = new String();

                //Vacio
                if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda vacia no pintamos nada
                {
                    file = "src/imgs/grass_005_64.png";
                } //Gigante
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene un gigante se pinta una G
                {
                    file = "src/imgs/bat_001_64.png";
                } //Murcielago
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda que tiene un murcielago se pinta una M
                {
                    file = "src/imgs/bat_001_64.png";
                } //Coin
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene una moneda se pinta una C
                {
                    file = "src/imgs/coin_005_64.png";
                } //Soldado
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 0) //Si es una celda que tiene un soldado se pinta una S
                {
                    file = "src/imgs/bat_001_64.png";
                } //LLave
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene una llave se pinta una L
                {
                    file = "src/imgs/coin_005_64.png";
                } //Piedra preciosa
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda que tiene una piedra preciosa se pinta una P
                {
                    file = "src/imgs/coin_005_64.png";
                } //Bloque
                else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 1) //Si es una celda que tiene muro se pinta una O
                {
                    file = "src/imgs/rock_005_64.png";
                }

                JLabel lab1 = new JLabel();

                min_window_size = Math.min(this.jPanel1.getHeight(), this.jPanel1.getWidth());
                max_cells = Math.max(dungeon.dungeon.length, dungeon.dungeon[0].length);

                lab1.setSize(new Dimension(((int) Math.floor(min_window_size / max_cells)) - 1, ((int) Math.floor(min_window_size / max_cells)) - 1));

                img = ImageIO.read(new File(file));
                Image dimg = img.getScaledInstance(lab1.getWidth(), lab1.getHeight(),
                        Image.SCALE_SMOOTH);
                ImageIcon imageIcon = new ImageIcon(dimg);
                lab1.setIcon(imageIcon);
                lab1.updateUI();

                bh.add(lab1);
            }
            bv.add(bh);
        }

        for (int i = 0; i <= dungeon.dungeon.length - 1; i++) {
            //Pintamos los techos con este for
            for (int j = 0; j <= dungeon.dungeon[i].length; j++) {
                // si nos encontramos en la fila inicial, todas tienen techos cerrados, pues no se puede abrir esas paredes
                if (j < dungeon.dungeon[i].length && i == 0) {
                    System.out.print("+---");
                }

                // si estamos en otra fila que no sea la primera entramos en este if
                if (j < dungeon.dungeon[i].length && i != 0) {
                    //pintamos un mas cada vez que entramos para separar las celdas y poner las esquinas de cada una con un mas
                    System.out.print("+");

                    // si la pared norte de la celda en la que estamos est‡ abierta entonces pintamos espacios, sino pintamos lineas para mostrar que est‡ cerrada
                    System.out.print("---");

                }

                // si hemos llegado al final de la fila pintamos el mas final
                if (j == dungeon.dungeon[i].length) {
                    System.out.println("+");
                }
            }

            //Pintamos las paredes con este for
            for (int j = 0; j <= dungeon.dungeon[i].length; j++) {

                // si nos encontramos en el lado de la izquierda pintamos pared y espacios o, dependiendo de si es la celda salida, meta o camino pintamos una letra representativa en vez de un espacio en esa celda
                if (j < dungeon.dungeon[i].length) {
                    if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda vacia no pintamos nada
                    {
                        System.out.print("|   ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene un gigante se pinta una G
                    {
                        System.out.print("| G ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda que tiene un murcielago se pinta una M
                    {
                        System.out.print("| M ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 0 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene una moneda se pinta una C
                    {
                        System.out.print("| C ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 0) //Si es una celda que tiene un soldado se pinta una S
                    {
                        System.out.print("| S ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 0 && dungeon.dungeon[i][j].genotipo_celda[2] == 1)//Si es una celda que tiene una llave se pinta una L
                    {
                        System.out.print("| L ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 0)//Si es una celda que tiene una piedra preciosa se pinta una P
                    {
                        System.out.print("| P ");
                    } else if (dungeon.dungeon[i][j].genotipo_celda[0] == 1 && dungeon.dungeon[i][j].genotipo_celda[1] == 1 && dungeon.dungeon[i][j].genotipo_celda[2] == 1) //Si es una celda que tiene muro se pinta una O
                    {
                        System.out.print("| * ");
                    }
                }

                // si hemos llegado al final de la fila pintamos la barra final y un salto de linea para seguir pintando en la siguiente linea
                if (j == dungeon.dungeon[i].length) {
                    System.out.println("|");
                }

            }
            // si las x son igual a la dimension del dungeon -1, es decir, que hemos llegado a la ultima fila del dungeon, pintamos el suelo del dungeon que va a estar cerrado 
            if (i == dungeon.dungeon.length - 1) {
                for (int h = 0; h < dungeon.dungeon[i].length; h++) {
                    System.out.print("+---");

                    if (h == dungeon.dungeon[i].length - 1) {
                        System.out.println("+");
                    }
                }
            }

        }
        return bv;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    int min_window_size = 0;
    int max_cells = 0;
    Dungeon dungeon = null;
    BufferedImage img = null;
    boolean isClicked = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
